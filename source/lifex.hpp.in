/********************************************************************************
  Copyright (C) 2019 - 2022 by the lifex authors.

  This file is part of lifex.

  lifex is free software; you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  lifex is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with lifex.  If not, see <http://www.gnu.org/licenses/>.
********************************************************************************/

/**
 * @file
 *
 * @author Pasquale Claudio Africa <pasqualeclaudio.africa@polimi.it>.
 */

#ifndef __LIFEX_HPP_
#define __LIFEX_HPP_

#include "source/exceptions.hpp"

#include <deal.II/base/config.h>

#include <deal.II/base/function.h>
#include <deal.II/base/index_set.h>
#include <deal.II/base/point.h>
#include <deal.II/base/quadrature.h>
#include <deal.II/base/tensor.h>
#include <deal.II/base/types.h>
#include <deal.II/base/vectorization.h>

#include <deal.II/differentiation/ad.h>
#include <deal.II/differentiation/ad/ad_helpers.h>

#include <deal.II/dofs/dof_handler.h>
#include <deal.II/dofs/dof_tools.h>

#include <deal.II/fe/component_mask.h>
#include <deal.II/fe/fe_dgq.h>
#include <deal.II/fe/fe_q.h>
#include <deal.II/fe/fe_simplex_p.h>
#include <deal.II/fe/fe_system.h>
#include <deal.II/fe/fe_values.h>

#include <deal.II/lac/affine_constraints.h>
#include <deal.II/lac/dynamic_sparsity_pattern.h>
#include <deal.II/lac/full_matrix.h>
#include <deal.II/lac/generic_linear_algebra.h>
#include <deal.II/lac/sparsity_tools.h>

#include <deal.II/numerics/data_out.h>
#include <deal.II/numerics/vector_tools.h>

#include <algorithm>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <string>
#include <tuple>
#include <utility>
#include <vector>

/// Global lifex namespace.
namespace lifex
{
  /// Major version number.
  static inline constexpr auto lifex_version_major = "@LIFEX_VERSION_MAJOR@";
  /// Minor version number.
  static inline constexpr auto lifex_version_minor = "@LIFEX_VERSION_MINOR@";
  /// Patch version number.
  static inline constexpr auto lifex_version_patch = "@LIFEX_VERSION_PATCH@";
  /// Full version number.
  static inline constexpr auto lifex_version = "@LIFEX_VERSION@";

  using namespace ::dealii;

  /**
   * @brief @dealii generic wrapper for Trilinos linear algebra.
   *
   * See also:
   * https://www.dealii.org/current/doxygen/deal.II/namespaceLinearAlgebraTrilinos.html
   */
  namespace LinAlgTrilinos
  {
    using namespace ::dealii::LinearAlgebraTrilinos;

    /**
     * @brief @dealii direct wrapper for Trilinos linear algebra.
     *
     * See also:
     * https://www.dealii.org/current/doxygen/deal.II/group__TrilinosWrappers.html
     */
    namespace Wrappers
    {
      using namespace ::dealii::TrilinosWrappers;
    }
  } // namespace LinAlgTrilinos

  /**
   * @brief @dealii generic wrapper for PETSc linear algebra.
   *
   * See also:
   * https://www.dealii.org/current/doxygen/deal.II/namespaceLinearAlgebraPETSc.html
   */
  namespace LinAlgPETSc
  {
    using namespace ::dealii::LinearAlgebraPETSc;

    /**
     * @brief @dealii direct wrapper for PETSc linear algebra.
     *
     * See also:
     * https://www.dealii.org/current/doxygen/deal.II/group__TrilinosWrappers.html
     */
    namespace Wrappers
    {
      using namespace ::dealii::PETScWrappers;
    }
  } // namespace LinAlgPETSc

  /**
   * @brief @lifex generic wrapper for linear algebra.
   *
   * The user may choose to use one of the two backends by selecting
   * a proper preprocessor directive (see @ref download-and-install).
   */
  namespace LinAlg
  {
#if defined(LIN_ALG_TRILINOS)
    using namespace ::lifex::LinAlgTrilinos;
#elif defined(LIN_ALG_PETSC)
    using namespace ::lifex::LinAlgPETSc;
#else
#  error -DLIN_ALG_TRILINOS or -DLIN_ALG_PETSC required.
#endif
  } // namespace LinAlg

  /// Path to additional data files.
  static inline constexpr auto lifex_path_data = "@CMAKE_SOURCE_DIR@/data/";

  /// Path to additional mesh files.
  static inline constexpr auto lifex_path_mesh = "@CMAKE_SOURCE_DIR@/mesh/";

  /// Path to reference solution files.
  static inline constexpr auto lifex_path_reference_solutions =
    "@CMAKE_SOURCE_DIR@/data/reference_solutions/";

  /// Path to reference solution files for test using either Trilinos or PETSc
  /// linear algebra.
  static inline constexpr auto lifex_path_reference_solutions_linalg =
    "@CMAKE_SOURCE_DIR@/data/reference_solutions_"
#if defined(LIN_ALG_TRILINOS)
    "trilinos"
#else
    "petsc"
#endif
    "/";

#ifndef LIFEX_DIM
  /**
   * @brief Geometrical space dimension.
   */
#  define LIFEX_DIM 3
#endif

  /**
   * @brief Geometrical space dimension.
   */
  constexpr unsigned int dim = LIFEX_DIM;

  /**
   * @brief Automatic differentiation type code.
   */
  static constexpr Differentiation::AD::NumberTypes ADNumberTypeCode =
    Differentiation::AD::NumberTypes::sacado_dfad;

  /**
   * @brief Alias for residual linearization automatic differentiation helper.
   */
  using ADHelper =
    Differentiation::AD::ResidualLinearization<ADNumberTypeCode, double>;

  /**
   * @brief Alias for scalar function automatic differentiation helper.
   */
  using ADHelperScalarFunction =
    Differentiation::AD::ScalarFunction<1, ADNumberTypeCode, double>;

  /**
   * @brief Alias for automatic differentiation double type with residual linearization.
   */
  using double_AD =
    typename Differentiation::AD::HelperBase<ADNumberTypeCode, double>::ad_type;

  /**
   * @brief Alias for extractor of values and derivatives
   * from automatic differentiation variables.
   */
  using ADExtractor = Differentiation::AD::internal::ExtractData<double_AD>;

  /**
   * @brief Alias for VectorizedArray double type.
   */
  using double_VEC = VectorizedArray<double>;


  /// Helper template variable: this is true whenever
  /// type @p T equals one of the types in the list @p Ts
  /// (since C++17).
  template <class T, class... Ts>
  inline constexpr bool is_any_v = (std::disjunction_v<std::is_same<T, Ts>...>);

  /// Binary <kbd>or</kbd> for generic <kbd>enum class</kbd>.
  template <class Enum>
  Enum
  operator|(const Enum &lhs, const Enum &rhs)
  {
    static_assert(std::is_enum<Enum>::value,
                  "Template parameter is not an enum type.");

    using underlying = typename std::underlying_type<Enum>::type;

    return static_cast<Enum>(static_cast<underlying>(lhs) |
                             static_cast<underlying>(rhs));
  }

  /// Binary <kbd>and</kbd> for generic <kbd>enum class</kbd>: returns true if
  /// the integer representation of the enumerations is non-zero, false
  /// otherwise.
  template <class Enum>
  Enum
  operator&(const Enum &lhs, const Enum &rhs)
  {
    static_assert(std::is_enum<Enum>::value,
                  "Template parameter is not an enum type.");

    using underlying = typename std::underlying_type<Enum>::type;

    return static_cast<Enum>(static_cast<underlying>(lhs) &
                             static_cast<underlying>(rhs));
  }

  /// Binary <kbd>xor</kbd> for generic <kbd>enum class</kbd>: returns true if
  /// the integer representation of the enumerations is non-zero, false
  /// otherwise.
  template <class Enum>
  Enum
  operator^(const Enum &lhs, const Enum &rhs)
  {
    static_assert(std::is_enum<Enum>::value,
                  "Template parameter is not an enum type.");

    using underlying = typename std::underlying_type<Enum>::type;

    return static_cast<Enum>(static_cast<underlying>(lhs) ^
                             static_cast<underlying>(rhs));
  }

  /// Check if an enumeration representing a set of binary flags matches a given
  /// mask.
  template <class Enum>
  bool
  bitmask_contains(const Enum &lhs, const Enum &rhs)
  {
    return (lhs & rhs) == rhs;
  }

  /// Utilities namespace.
  namespace utils
  {} // namespace utils
} // namespace lifex

#endif /* __LIFEX_HPP_ */
