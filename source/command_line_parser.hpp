/********************************************************************************
  Copyright (C) 2019 - 2022 by the lifex authors.

  This file is part of lifex.

  lifex is free software; you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  lifex is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with lifex.  If not, see <http://www.gnu.org/licenses/>.
********************************************************************************/

/**
 * @file
 *
 * @author Marco Fedele <marco.fedele@polimi.it>.
 * @author Pasquale Claudio Africa <pasqualeclaudio.africa@polimi.it>.
 */

#ifndef __LIFEX_COMMAND_LINE_PARSER_HPP_
#define __LIFEX_COMMAND_LINE_PARSER_HPP_

#include "source/core.hpp"

#include "source/io/clipp.hpp"

#include <string>
#include <utility>
#include <vector>

namespace lifex
{
  /**
   * @brief Parser of parameter filenames from command line.
   *
   * This class is conceived to parse the name of the parameter files in
   * @lifex applications and examples.
   *
   * @see @ref run for further details.
   */
  class CommandLineParser
  {
  public:
    friend class lifex_init;

    /**
     * Constructor.
     *
     * Declare command-line options specified in @p cli_in,
     * by @ref declare_lifex_options (if <kbd>lifex_options == true</kbd>)
     * and by @ref declare_misc_options and parse them.
     *
     * @param[in] argc          Number of input arguments.
     * @param[in] argv          Array of input arguments.
     * @param[in] lifex_options Enable/disable options declared
     *                          by @ref declare_lifex_options.
     * @param[in] cli_in        <kbd>clipp</kbd> options object.
     */
    CommandLineParser(int &               argc,
                      char **&            argv,
                      const bool &        lifex_options = true,
                      const clipp::group &cli_in        = clipp::group());

  protected:
    /**
     * Parse command-line options.
     *
     * If the syntax does not match the intended usage or the <kbd>-h</kbd>
     * option has been specified, the help message is shown.
     */
    void
    parse_cli(int &argc, char **&argv, const clipp::group &cli);

    /**
     * Declare the following command-line options:
     * - <kbd>-h</kbd> <kbd>--help</kbd> to show the help message and exit;
     * - <kbd>-v</kbd> <kbd>--version</kbd> to show version information and
     * exit.
     */
    clipp::group
    declare_misc_options();

    /**
     * Declare the following command-line options:
     * - <kbd>-g</kbd>, <kbd>--generate-params</kbd> to toggle parameter file
     * generation mode;
     * - <kbd>-f</kbd>, <kbd>--params-filename</kbd> to specify the parameter
     * filename to parse or to generate;
     * - <kbd>-d</kbd>, <kbd>--dry-run</kbd> to toggle dry run;
     * - <kbd>-o</kbd>, <kbd>--output-directory</kbd> to specify the global
     * output directory for files generated by the current application;
     * - <kbd>-l</kbd>, <kbd>--log-file</kbd> to specify the filename for the
     * parameter log file to be saved while running.
     *
     * If @lifex has been compiled using <kbd>PETSc</kbd> as a linear algebra
     * backend, the flag <kbd>-options_file</kbd> can be used to forward an
     * options file to <kbd>PETSc</kbd>.
     *
     * @see @ref run for further details.
     */
    clipp::group
    declare_lifex_options();

    /// Toggle for whether the <kbd>-h</kbd> flag has been passed (@a i.e. show
    /// help and exit).
    bool show_help;

    /// App name.
    const std::string app_name;

    /// Parameter filename.
    std::string param_filename;

    /// Boolean to specify if the app is being run in generate mode.
    bool generate_mode;

    /// Boolean to toggle dry run.
    bool dry_run;

    /// Parameter file verbosity.
    VerbosityParam verbosity_param;

    /// Toggle parameter file verbosity to @ref VerbosityParam::Minimal.
    bool verbosity_param_minimal;
    /// Toggle parameter file verbosity to @ref VerbosityParam::Full.
    bool verbosity_param_full;

    /// Directory for exporting output, such as simulation results, etc.
    std::string output_directory;

    /// Parameter log filename.
    std::string log_filename;
  };

} // namespace lifex

#endif /* __LIFEX_COMMAND_LINE_PARSER_HPP_ */
